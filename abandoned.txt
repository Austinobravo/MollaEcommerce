			checkout javascript
            
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'finlend',
        'USER':'postgres',
        'PASSWORD':'karmakaz210',
        'HOST':'localhost',
        'PORT':'5432'
    }

            
            // var form = document.getElementById('form')

			// csrftoken = form.getElementsByTagName("input")[0].value
			// console.log('newtoken:', form.getElementsByTagName("input")[0].value );
			// //document.getElementById('submit').addEventListener('click', function(e){submitFormData()})

			// function submitFormData(){
			// 	console.log('Submit clicked');

			// 	var UserForm ={
			// 		'first_name': null,
			// 		'last_name': null,
			// 		'email': null,
			// 		'phone': null,
			// 		'total': total,
			// 	}
			// 	var ShippingInfo ={
			// 		'house': null,
			// 		'suite': null,
			// 		'state': null,
			// 		'city': null,
			// 		'zip': null,
			// 		'country': null,
			// 		'description': null,
			// 		'payment': null,
			// 	}
			// 	if(shipping !='False'){
			// 		ShippingInfo.house=form.house.value
			// 		ShippingInfo.suite=form.suite.value
			// 		ShippingInfo.state=form.state.value
			// 		ShippingInfo.city=form.city.value
			// 		ShippingInfo.zip=form.zip.value
			// 		ShippingInfo.country=form.country.value
			// 		ShippingInfo.description=form.description.value
			// 		ShippingInfo.payment=form.payment.value
			// 	}
			// 	if(user=='AnonymousUser'){
			// 		UserForm.first_name=form.first_name.value
			// 		UserForm.last_name=form.last_name.value
			// 		UserForm.email=form.email.value
			// 		UserForm.phone=form.phone.value
			// 	}

			// 	var url = '/process_order/'
			// 	fetch(url, {
			// 		method: 'POST',
			// 		headers:{
			// 			'Content-Type':'application/json',
			// 			'X-CSRFToken': csrftoken,
			// 		},
			// 		body:JSON.stringify({'form': UserForm, 'shipping':ShippingInfo})
			// 	})
			// 	.then((response) => response.json())

			// 	.then((data) =>{
			// 		console.log('Success:', data);
			// 		alert('Completed successfully')

			// 		cart = {}
       		// 		document.cookie = 'cart=' + JSON.stringify(cart) + ";domain=;path=/"
			 
			// 	})
			// }

			//stripe

			# new
@csrf_exempt
def stripe_config(request):
    if request.method == 'GET':
        stripe_config = {'publicKey': settings.STRIPE_PUBLISHABLE_KEY}
        return JsonResponse(stripe_config, safe=False)


@csrf_exempt
def create_checkout_session(request):
    if request.method == 'POST':
        domain_url = 'http://localhost:8000/'
        stripe.api_key = settings.STRIPE_SECRET_KEY
        try:
            # Create new Checkout Session for the order
            # Other optional params include:
            # [billing_address_collection] - to display billing address details on the page
            # [customer] - if you have an existing Stripe Customer ID
            # [payment_intent_data] - capture the payment later
            # [customer_email] - prefill the email input in the form
            # For full details see https://stripe.com/docs/api/checkout/sessions/create

            # ?session_id={CHECKOUT_SESSION_ID} means the redirect will have the session ID set as a query param
            checkout_session = stripe.checkout.Session.create(
                success_url=domain_url + 'success?session_id={CHECKOUT_SESSION_ID}',
                cancel_url=domain_url + 'cancelled/',
                payment_method_types=['card'],
                mode='payment',
                line_items=[
                    {
                        'name': 'T-shirt',
                        'quantity': 1,
                        'currency': 'usd',
                        'amount': '2000',
                    }
                ]
            )
            return JsonResponse({'sessionId': checkout_session['id']})
        except Exception as e:
            return JsonResponse({'error': str(e)})

# class StripePayment(View):
#     def get(self, *args, **kwargs):
# # def stripe_config(request):
#         if self.request.method == 'GET':
#             stripe_config = {'publicKey': settings.STRIPE_PUBLISHABLE_KEY}
#             return JsonResponse(stripe_config, safe=False)


#paypal
       #! /usr/bin/env python3.6
        #! /usr/bin/env python3.6


# This is a public sample test API key.
# Donâ€™t submit any personally identifiable information in requests made with this key.
# Sign in to see your own test API key embedded in code samples.

        try:
            checkout_session = stripe.checkout.Session.create(
                line_items=[
                    {
                        # Provide the exact Price ID (for example, pr_1234) of the product you want to sell
                        'price': '{{PRICE_ID}}',
                        'quantity': 1,
                    },
                ],
                mode='payment',
                success_url=YOUR_DOMAIN + '/success.html',
                cancel_url=YOUR_DOMAIN + '/cancel.html',
            )
        except Exception as e:
            return str(e)

        return redirect(checkout_session.url, code=303)

    if __name__ == '__main__':
        app.run(port=4242)



    #     try:
    #         data = json.loads(self.request.data)
    #         # Create a PaymentIntent with the order amount and currency
    #         intent = stripe.PaymentIntent.create(
    #             amount=calculate_order_amount(data['items']),
    #             currency='usd',
    #             automatic_payment_methods={
    #                 'enabled': True,
    #             },
    #         )
    #         return jsonify({
    #             'clientSecret': intent['client_secret']
    #         })
    #     except Exception as e:
    #         return jsonify(error=str(e)), 403
    # if __name__ == '__main__':
    #     app.run(port=4242)
    # #     amount=order.get_total * 100
    #     currency='usd'
    #     try:
    #         charge = stripe.Charge.create(
    #         amount = amount,
    #         currency=currency
    #     )

    #         order.order_complete = True
    #         payment = Payment()
    #         payment.stripe_charge_id = charge['id']
    #         payment.user = self.request.user
    #         payment.amount  = amount
    #         payment.save()
    # #Assigning an order a payment
    #         order.payment = payment
    #         order.reference_coode = reference_code()
    #         order.save()

    #         messages.success(self.request, 'Your order was successful')
            

    #     except stripe.error.Carderror as e:
    #         body = e.json_body
    #         err = body.get['error', {}]
    #         messages.error(self.request, err.get('message'))
    #     except Exception as e:
    #         messages.error(self.request, 'A error occurred')

def processorder(request):
    '''
    transaction_id= datetime.datetime.now().timestamp()

    if request.user.is_authenticated:
        customer = request.user.customer
        order, created = Order.objects.get_or_create(customer=customer,order_complete=False)
        
    else:
        print('cookies:', request.COOKIES)
        first_name =  data['form']['first_name']  
        last_name =  data['form']['last_name']  
        email =  data['form']['email']  
        phone =  data['form']['phone'] 

        CookieData = CookieCart(request)
        items=CookieData['items'] 

        customer, created = Customer.objects.get_or_create(email=email)
        customer.first_name=first_name 
        customer.last_name=last_name
        customer.phone=phone
        customer.save()

        order=Order.objects.create(customer=customer, order_complete=False)
        for item in items:
            product=Product.objects.get(id=item['product']['id'])
            orderitem=OrderItem.objects.create(product=product, order=order,quantity=item['quantity'])
            orderitem.save()
    total = float(data['form']['total'])
    order.transaction_id=transaction_id

    if total == order.get_cart_total:
        order.order_complete=True
    order.save()

    if order.shipping == True:
        ShippingAddress.objects.create(
            customer=customer,
            order=order,
            house = data['shipping']['house'],
            suite = data['shipping']['suite'],
            state = data['shipping']['state'],
            city = data['shipping']['city'],
            zip = data['shipping']['zip'],
            country = data['shipping']['country'],
            description = data['shipping']['description'],
            payment = data['shipping']['payment'],
        )        
            '''
    return JsonResponse('Payment was processed.', safe=False)
# Hey, might be a year late!
# Here is an easy fix for the card-total without reload!

# Add this line instead of "location.reload"

# document.getElementById('total-items').innerText = data['cartTotal']

# Then in your views.py for updateitem add this these lines:

# context={
#     "cartTotal": order.get_cart_total_quantity(),
# }
# return JsonResponse(context, safe=False)

# Then just make sure, in every place where there is a cart-total to be displayed, add the ID of "total-items"